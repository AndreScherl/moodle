<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * To store core changes linked to this pluign.
 *
 * @package   local_dlb
 * @copyright 2014 Davo Smith, Synergy Learning
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace local_dlb\local;

use context_system;
use moodle_url;

defined('MOODLE_INTERNAL') || die();

class core_changes {

    public static function check_view_courses() {
        $context = context_system::instance();
        if (!has_capability('local/dlb:viewcourselist', $context)) {
            redirect(new moodle_url('/')); // Redirect to front page.
        }
    }

    public static function add_shortname_check() {
        global $PAGE;
        $PAGE->requires->yui_module('moodle-local_dlb-shortname', 'M.local_dlb.shortname.init');
    }

    public static function assert_fix_course_sortorder_categories($categorieids, $starttime, $methodcall) {
        global $DB, $SESSION, $CFG;

        if (empty($CFG->debugfixsortorder)) {
            return true;
        }
        if (!empty($SESSION->profilefixsortorder)) {
            $SESSION->profilefixsortorder .= "<br>{$methodcall}: " . (microtime(true) - $starttime);
        } else {
            $SESSION->profilefixsortorder = "<br>{$methodcall}: " . (microtime(true) - $starttime);
        }

        if (!empty($categorieids)) {

            // retrieve categories-data generated by modified fix_course_sortorder.
            list($incatids, $inparams) = $DB->get_in_or_equal($categorieids);

            $sql = "SELECT * FROM {course_categories} WHERE id $incatids";
            $categories = $DB->get_records_sql($sql, $inparams);

            $sql = "SELECT * FROM {context} c WHERE instanceid $incatids AND contextlevel = ?";
            $params = $inparams;
            $params[] = CONTEXT_COURSECAT;
            $contexts = $DB->get_records_sql($sql, $params);
        }

        if (!empty($categorieids)) {
            
            // retrieve categories-data generated by original fix_course_sortorder 
            $sql = "SELECT * FROM {course_categories} WHERE id $incatids";
            $categoriesorg = $DB->get_records_sql($sql, $inparams);

            $sql = "SELECT * FROM {context} c WHERE instanceid $incatids AND contextlevel = ?";
            $contextsorg = $DB->get_records_sql($sql, $params);

            // obtain the differences between cat and context.
            $catdifferences = "";
            foreach ($categories as $catid => $category) {
                foreach ($category as $key => $value) {
                    if ($categoriesorg[$catid]->$key != $value) {
                        $catdifferences .= "Cat: {$key}: $value/[{$categoriesorg[$catid]->$key}]";
                    }
                }
            }

            $contextdifferences = "";
            foreach ($contexts as $cid => $context) {
                foreach ($context as $key => $value) {
                    if ($contextsorg[$cid]->$key != $value) {
                        $catdifferences .= "Ctx: {$key}: $value/[{$contextsorg->$key}]";
                    }
                }
            }

            if (!empty($catdifferences)) {
                $SESSION->profilefixsortorder .= "<br>" . $catdifferences;
                debugging($SESSION->profilefixsortorder);
            }

            if (!empty($contextdifferences)) {
                $SESSION->profilefixsortorder .= "<br>" . $contextdifferences;
                debugging($SESSION->profilefixsortorder);
            }
        }
    }

}
